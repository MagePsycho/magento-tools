#!/usr/bin/env php
<?php
//
// Create nonce data to test the system at load.
//
// @author      Joseph Mastey <joseph.mastey@gmail.com>
// @author      $Author$
// @version     $Id$
// @copyright   Copyright (c) JRM Ventures LLC, 2010-

require_once("lib/base.php"); 
require_once("lib/yml.php"); 
require_once("lib/db.php"); 
session_start();
init_magento();

if(2 > $_SERVER['argc']) {
    print_help();
}

// load each fixture
try {
    for($i = 1; $i < $_SERVER['argc']; $i++) {
        $fixture = $_SERVER['argv'][$i];
        print "loading fixture: $fixture\n";
        load_fixture($fixture);
        print "\n";
    }
} catch(Exception $e) {
    print "Fixture import bailed partway through. Likely partial data needs to be expunged.\nException: ".$e->getMessage()."\n";
    print $e->getTraceAsString();
}

function load_fixture($fixture_name) {
    $data = get_fixture_data("$fixture_name");
    foreach($data as $sec => $sec_data) {
        print "  starting import for $sec\n";

        $context            = new stdClass();
        $context->data      = $sec_data;
        $context->title     = $sec;
        $context->bases     = load_bases($context);

        foreach($sec_data['entries'] as $ent => $ent_data) {
            print "    importing $ent\n";
            $context->entry         = $ent_data;
            $context->entry_title   = $ent;
            $context->iterator      = get_iterator($context);

            // perform import
            $iterator = $context->iterator;
            $iterator($context);
        }
    }
}

function get_entity($context) {
    if(!isset($context->data) || !isset($context->data['entity'])) {
        throw new Exception("Can't get entity data for {$context->title}");
    }

    $class_handle = $context->data['entity'];
    return Mage::getModel($class_handle);
}

// right now it looks like I should be able to ignore the bases themselves.
// this method is for informational output and as a stub for initialization
// of features later.
function load_bases($context) {
    if(!isset($context->data) || !isset($context->data['bases'])) {
        return array();
    }

    foreach($context->data['bases'] as $base => $base_data) {
        print "    found base '$base'\n";
    }

    return array();
}

// get a function callback for the correct iterator
function get_iterator($context) {
    if(!isset($context->entry) || !isset($context->entry['iterate'])) {
        $context->entry['iterate'] = 1;
    }

    $iterate = $context->entry['iterate'];

    if(is_numeric($iterate)) {
        return "iterate_numeric";
    } else if(function_exists("iterate_$iterate")) {
        return "iterate_$iterate";
    } else {
        throw new Exception("Unknown iterator: $iterate");
    }
}

function get_fixture_data($type) {
    global $support_dir;

    if(!file_exists("$support_dir/fixtures/$type.yml")) {
        throw new Exception("No fixture data found for $type");
    }

    return sfYaml::load("$support_dir/fixtures/$type.yml");
}

function iterate_numeric($context) {
    $ct = $context->entry['iterate'];
    for($i = 0; $i < $ct; $i++) {
        save_record($context->entry, $context);
    }
}

function iterate_numeric_prompt($context) {
    $num = (int)user_text("    How many entries for $context->entry_title", null, "/^\d+$/");
    $context->entry['iterate'] = $num;
    print "\n";
    iterate_numeric($context);
}

function save_record(array $entry, $context) {
    $entry  = $entry + array(); //take an array copy
    $entity = get_entity($context);
    $context->entity = $entity;

    foreach($entry as $key => $value) {
        if($value && function_exists($value)) {
            $entry[$key] = $value($entry, $context);
        } else if(0 === strpos($value, "fixture_")) {
            throw new Exception("Please define a mock data method $value for {$context->title}");
        }
    }

    if(isset($context->data['entity_type'])) {
        $process_func = "process_".$context->data['entity_type'];
        if(function_exists($process_func)) {
            $process_func($entry, $context, $entity);
        }
    }

    $entity->setData($entry);
    if(!$entity->save()) {
        throw new Exception("Save didn't happen");
    }

    if(isset($context->data['entity_type'])) {
        $process_func = "post_process_".$context->data['entity_type'];
        if(function_exists($process_func)) {
            $process_func($entry, $context, $entity);
        }
    }
}













// FIXTURE HELPER METHODS TO GENERATE DUMMY DATA

function fixture_string($entry, $context) {
    return get_flw($context).get_flw($context);
}

function fixture_capsed_string($entry, $context) {
    return ucfirst(fixture_string($entry, $context));
}

function fixture_sentence($entry, $context) {
    $lipsum = get_lipsum($context);
    shuffle($lipsum);

    return $lipsum[0];
}

function fixture_paragraph($entry, $context) {
    $lipsum = get_lipsum($context);
    shuffle($lipsum);

    $sentences  = rand(3, 5);
    $txt        = array();
    for($i = 0; $i < $sentences; $i++) {
        $txt[]  = $lipsum[$i];
    }

    return implode(" ", $txt);
}

function fixture_page($entry, $context) {
    $paragraphs = rand(3,6);
    $txt        = array();

    for($i = 0; $i < $paragraphs; $i++) {
        $txt[]  = fixture_paragraph($entry, $context);
    }

    return implode("\n", $txt);
}

function fixture_phone() {
    return "800-555-1212";
}

function fixture_country($entry, $context, $return_obj = false) {
    if(!isset($context->countries)) {
        $context->countries = array_values(Mage::getModel("directory/country")->getCollection()->getItems());
    }

    $country = $context->countries[rand(0, count($context->countries)-1)];

    // recurse if we didn't find a country w/ regions
    if(!count($country->getRegions())) { $country = fixture_country($entry, $context, true); }

    $context->entry_country = $country;
    return $return_obj? $country : $country->getCountryId();
}

function fixture_region($entry, $context) {
    if(!isset($context->entry_country) && !$entry['country_id']) {
        throw new Exception("Couldn't get country code for entry - cannot find resulting regions.");
    }

    $country_id = $entry['country_id'];

    if(!isset($context->entry_country)) {
        $context->entry_country = Mage::getModel("directory/country")->loadByCode($country_id);
    }


    if(!isset($context->regions)) { $context->regions = array(); }
    if(!isset($context->regions[$country_id])) {
        $regions = $context->entry_country->getRegions()->getItems();
        $regionData = array();
        foreach($regions as $key => $value) {
            // this array is backwards to make access in fixture_region_id faster
            $regionData[$value->getName()] = $key;
        }
        $context->regions[$country_id] = $regionData;
    }

    if(!count($context->regions[$country_id])) {
        return fixture_string($entry, $context);
    } else {
        $keys = array_keys($context->regions[$country_id]);
        shuffle($keys);
        return array_shift($keys);
    }
}

function fixture_region_id($entry, $context) {
    if(!isset($entry['country_id']) || !isset($entry['region'])) {
        throw new Exception("Couldn't construct region_id from entity params.");
    }

    $country = $entry['country_id'];
    $regions = $context->regions[$country];

    // some countries have no listed regions
    if(!count($regions) || !isset($regions[$entry['region']])) {
        return null;
    }

    return $regions[$entry['region']];
}


function fixture_zip() {
    return rand(10000, 99999);

}

function fixture_street($entry, $context) {
    $streets    = rand(1,2);
    $str        = "";
    for($i = 0; $i < $streets; $i++) {
        $str    .= rand(10,99999)." ".fixture_capsed_string($entry, $context)."\n";
    }

    return trim($str);
}

function fixture_past_date() {
    return date("Y-m-d h:i:s", strtotime("-".rand(30,365)." days"));
}

function fixture_future_date() {
    return date("Y-m-d h:i:s", strtotime("+".rand(30,365)." days"));
}

function fixture_store_name() {
    return Mage::app()->getStore()->getName();
}

function fixture_long_store_name() {
    $store = fixture_website_name()."\n".
             fixture_store_group_name()."\n".
             fixture_store_name();

    return $store;
}

function fixture_store_id() {
    return Mage::app()->getStore()->getId();
}

function fixture_website_id() {
    return Mage::app()->getStore()->getWebsite()->getId();
}

function fixture_website_name() {
    return Mage::app()->getStore()->getWebsite()->getName();
}

function fixture_store_group_name() {
    return Mage::app()->getStore()->getGroup()->getName();
}

function fixture_address($entry, $context) {
    $sqlst = "select entity_id from customer_address_entity order by rand() limit 1";
    $res = mysql_query($sqlst);
    if(!$res) {
        throw new Exception("Couldn't get an address");
    }

    $row = mysql_fetch_array($res);
    return $row['entity_id']*1;
}

function fixture_customer_by_addresses($entry, $context) {
    # try to select by fewest addresses
    $sqlst = "select entity_id, 
        (select count(*) from customer_address_entity a where a.parent_id = e.entity_id) addresses
        from customer_entity e order by addresses asc, rand() limit 1";
    $res = mysql_query($sqlst);
    if(!$res) {
        throw new Exception("Couldn't get a customer entity");
    }

    $row = mysql_fetch_array($res);
    $entity_id = $row['entity_id']*1;
    $context->customer_id = $entity_id;
    return $entity_id;
}

function fixture_customer($entry, $context) {
    $sqlst = "select entity_id from customer_entity e order by rand() limit 1";
    $res = mysql_query($sqlst);
    if(!$res) {
        throw new Exception("Couldn't get a customer entity");
    }

    $row = mysql_fetch_array($res);
    $entity_id = $row['entity_id']*1;
    $context->customer_id = $entity_id;
    return $entity_id;
}

function fixture_customer_group($entry, $context) {
    if(!isset($context->customer_id)) {
        throw new Exception("Can't get address for non-existent customer.");
    }

    $customer = Mage::getModel("customer/customer")->load($context->customer_id);
    return $customer->getGroupId();
}

function fixture_customer_email($entry, $context) {
    if(!isset($context->customer_id)) {
        throw new Exception("Can't get address for non-existent customer.");
    }

    $customer = Mage::getModel("customer/customer")->load($context->customer_id);
    return $customer->getEmail();
}

function fixture_customer_address($entry, $context) {
    if(!isset($context->customer_id)) {
        throw new Exception("Can't get address for non-existent customer.");
    }

    $customer = Mage::getModel("customer/customer")->load($context->customer_id);
    $addresses = $customer->getAddressesCollection();
    if(!count($addresses)) {
        throw new Exception("Customer didn't have any addresses.");
    }

    $address = $addresses->getFirstItem();
    return $address->getId();
}

function fixture_email($entry, $context) {
    global $email;
    list($address, $domain) = explode("@", $email);
    $postfix = fixture_string($entry, $context);

    return "$address+$postfix@$domain";
}

function fixture_group_id() {
    return Mage::getStoreConfig(Mage_Customer_Model_Group::XML_PATH_DEFAULT_ID);
}

function fixture_password_hash() {
    return get_hash("password", 2);
}

function fixture_entity_type($entry, $context) {
    if(!isset($context->data['entity_type'])) {
        throw new Exception("Need to specify an entity type.");
    }

    $cfg = Mage::getSingleton("eav/config");
    return $cfg->getEntityType($context->data['entity_type'])->getEntityTypeId();
}

function get_flw($context) {
    if(!isset($context->four_letter_words) || !count($context->four_letter_words)) {
        $context->four_letter_words = get_four_letter_words();
    }

    shuffle($context->four_letter_words);
    return array_shift($context->four_letter_words);
}

function get_four_letter_words() {
    global $support_dir;
    return explode("\n", file_get_contents("$support_dir/fourletterwords.txt"));
}

function fixture_product() {
    $sqlst  = "select entity_id from catalog_product_entity order by rand() limit 1";
    $res    = mysql_query($sqlst);
    if(!$res) {
        throw new Exception("Couldn't find a product");
    }

    $row    = mysql_fetch_array($res);
    return $row['entity_id'];
}

function get_lipsum($context) {
    global $support_dir;

    if(!isset($context->lipsum_sentences)) {
        $context->lipsum_sentences = explode("\n", trim(file_get_contents("$support_dir/lipsum.txt")));
    }

    return $context->lipsum_sentences;
}

function process_order($entry, $context, $entity) {
    $quote      = Mage::getModel("sales/quote");

    $payment    = Mage::getModel("sales/order_payment");
    $payment->setMethod('free');
    $entity->addPayment($payment);

    $qshipping = Mage::getModel("sales/quote_address");
    $qshipping->importCustomerAddress(Mage::getModel("customer/address")->load($entry['shipping_address_id']));
    $oshipping = Mage::getModel("sales/order_address");
    Mage::helper("core")->copyFieldset(
        "sales_convert_quote_address",
        "to_order_address",
        $qshipping,
        $oshipping
    );
    $entity->setShippingAddress($oshipping);

    $qbilling = Mage::getModel("sales/quote_address");
    $qbilling->importCustomerAddress(Mage::getModel("customer/address")->load($entry['billing_address_id']));
    $obilling = Mage::getModel("sales/order_address");
    Mage::helper("core")->copyFieldset(
        "sales_convert_quote_address",
        "to_order_address",
        $qbilling,
        $obilling
    );
    $entity->setBillingAddress($obilling);

    $num_items  = $entry['total_item_count'];
    $qty        = $entry['total_qty_ordered'];
    if($qty < $num_items) {
        $qty    = $num_items;
        $entity->setTotalQtyOrdered($qty);
    }
    
    $items      = Mage::getModel("catalog/product")
        ->getCollection()
        ->setPageSize($num_items);
    $items->getSelect()->order('rand()');
    $items      = array_values($items->getItems());

    if(count($items) < $num_items) {
        throw new Exception("There aren't enough items to generate orders.");
    }

    for($i = 0; $i < $num_items; $i++) {
        $thisqty    = ($i == ($num_items-1))?$qty:1;
        $qty        -= $thisqty;

        $product    = $items[$i];
        $sitem      = Mage::getModel("cataloginventory/stock_item")
            ->loadByProduct($product);
        $product->setStockItem($sitem);
        $qitem      = Mage::getModel("sales/quote_item")
            ->setQuote($quote)
            ->setProduct($product)
            ->setOriginalPrice($product->getPrice())
            ->setCalculationPrice($product->getPrice())
            ->setQty($thisqty);

        $oitem      = Mage::getModel("sales/order_item");
        Mage::helper("core")->copyFieldset(
            "sales_convert_quote_item",
            "to_order_item",
            $qitem,
            $oitem
        );
        $oitem->setProductId($product->getId());
        $entity->addItem($oitem);
    }
}

function _category_id($level) {
    $sqlst  = "select entity_id from catalog_category_entity where level in ($level) order by rand() limit 1";
    $res    = mysql_query($sqlst);
    if(!$res) {
        throw new Exception("Couldn't find a category of levels: $level.");
    }

    $row    = mysql_fetch_array($res);
    return $row['entity_id'];
}

function fixture_category_id() {
    return _category_id("1,2");
}

function fixture_root_category() {
    return _category_id("1");
}

function fixture_toplevel_category() {
    return _category_id("2");
}

function fixture_event_category() {
    $sqlst  = "select entity_id from catalog_category_entity where level in (2,3) and entity_id not in (select category_id from enterprise_catalogevent_event) order by rand() limit 1";
    $res    = mysql_query($sqlst);
    if(!$res) {
        throw new Exception("Couldn't find a category without an event.");
    }

    $row    = mysql_fetch_array($res);
    return $row['entity_id'];

}

function fixture_child_level($entry) {
    $parent = $entry['parent_id'];
    $parent_obj = Mage::getModel("catalog/category")->load($parent);
    return $parent_obj->getLevel() + 1;
}

function fixture_next_child_position() {
    $sqlst  = "select max(position)+1 as position from catalog_category_entity";
    $res    = mysql_query($sqlst);
    if(!$res) {
        throw new Exception("Couldn't find a product");
    }

    return $res['position'];
}

function fixture_url_key($entry) {
    return strtolower(str_replace(" ", "-", $entry['name']));
}

function fixture_url_path($entry) {
    return strtolower(str_replace(" ", "-", $entry['name'])).".html";
}

function post_process_category($entry, $context, $entity) {
    $parent_id = $entry['parent_id'];
    $parent = Mage::getModel("catalog/category")->load($entry['parent_id']);
    $path = $parent->getPath()."/".$entity->getId();

    $sqlst  = "update catalog_category_entity set level = {$entry['level']}, parent_id = {$entry['parent_id']}, path = '$path' where entity_id = ".$entity->getId();
    mysql_query($sqlst);
}

function process_catalogevent($entry, $context, $entity) {
    if(strtotime($entry['date_start']) < strtotime($entry['date_end'])) {
        $end = $entry['date_end'];
        $entry['date_end'] = $entry['date_start'];
        $entry['date_start'] = $end;
    }
}

function putdocs() {
    return array(
        "Create nonce data to test the system at load.",
        "Usage: magento-test-fixture FIXTURE",
    );
}
