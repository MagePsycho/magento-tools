#!/usr/bin/env ruby

require 'rubygems'
require 'rss/1.0'
require 'rss/2.0'
require 'date'
require 'optparse'
require 'json'
require 'net/http'

options = {}
optparse = OptionParser.new(:posix) do |opts|
  opts.banner = "Check oDesk for jobs relating to Magento.\nUsage: magento-jobs-odesk [options]"

  options[:days] = 7
  opts.on( "-d N", "--days=N", Integer, "How recent listings must be (default is #{options[:days]})" ) do |days|
    options[:days] = days
  end

  options[:json] = false
  opts.on( "-j", "--json", nil, "Output data as JSON" ) do
    options[:json] = true
  end

  opts.on( '-h', '--help', 'Display this screen' ) do
    puts opts
    exit
  end
end

begin
  optparse.parse!
rescue OptionParser::ParseError => e
  puts e
  exit
end

def parse_tokens(description)
  tokens = {}

  d_plus_tokens = description.split("<br />")
  d_plus_tokens.each do |token|
    next unless token.match /<b>([a-z ]*)<\/b>: (.*)/i

    tok_values = token.scan(/<b>([a-z ]*)<\/b>: (.*)/i)[0]
    tokens[tok_values[0].downcase.to_sym] = tok_values[1]
  end

  tokens
end

today   = Date.today
urlbase = 'https://www.odesk.com/jobs/rss?q=magento'

content = ""
open(urlbase) do |s| content = s.read end
rss = RSS::Parser.parse(content, false)

results = []
rss.items.reverse.each do |item|
  date = Date.parse(item.pubDate.to_s)
  next if date+options[:days] < today

  title = item.title.sub(" - oDesk", "").encode('utf-8', 'iso-8859-1')
  link = item.link.gsub(/(jobs\/)[^%]*(%[^?]*)?.*/, '\\1\\2')
  tokens = parse_tokens(item.description)
  budget = (tokens.has_key? :budget)?tokens[:budget]:""

  results << { :date => date.strftime("%m/%d"),  :budget => budget, :title => title, :link => link, :area => '' }
end

if options[:json]
  puts results.to_json
else
  results.each { |r| print "%6s\t%s\t%s\t%s\n" % [r[:date], r[:budget], r[:link], r[:title]] }
end
